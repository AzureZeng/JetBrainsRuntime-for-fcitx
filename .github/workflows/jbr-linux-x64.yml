name: jbr-linux-x64

on:
  workflow_call:
    inputs:
      ref:
        description: The git ref to use for the build
        required: true
        type: string
      release_name:
        required: true
        type: string
      release_body:
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Clone Repository
      uses: actions/checkout@v2.4.0

    - name: Generate Variables
      id: vars
      run: |
        ref="${{ inputs.ref }}"
        if [[ "$ref" != jbr* ]]; then
          echo "Invalid tag name: $ref"
          exit 1
        fi

        JBSDK_VERSION=$(sed -E 's/^jbr([0-9_]+)b.*$/\1/' <<< "$ref")
        echo ::set-output name=JBSDK_VERSION::"$JBSDK_VERSION"

        build_number=$(sed -E 's/^jbr[0-9_]+b([0-9.]+)$/\1/' <<< "$ref")
        echo ::set-output name=build_number::"$build_number"

        bundle_type=jcef
        echo ::set-output name=bundle_type::"$bundle_type"

        mkdir official_build && cd official_build
        curl -sfL -m 600 "https://cache-redirector.jetbrains.com/intellij-jbr/jbr_${bundle_type}-${JBSDK_VERSION}-linux-x64-b${build_number}.tar.gz" | tar --strip-components=1 -zxf -
        JDK_BUILD_NUMBER=$(bin/java -version 2>&1 | grep -oE '\(build [0-9.]+\+[0-9]+-b[0-9.]+\)$' | sed -E 's/^.+\+([0-9]+)-b.+$/\1/')
        echo ::set-output name=JDK_BUILD_NUMBER::"$JDK_BUILD_NUMBER"
        cd .. && rm -rf official_build

        JBR_BASE_NAME=jbr_${bundle_type}-${JBSDK_VERSION}
        echo ::set-output name=JBR::"${JBR_BASE_NAME}-linux-x64-b${build_number}"

    - name: Init Build Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get update -y
        sudo -E apt-get install -y ant autoconf bison build-essential cmake flex git gperf ksh \
            libasound2-dev libavcodec-dev libavformat-dev libcups2-dev libfontconfig1-dev \
            libgl1-mesa-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libgtk2.0-dev libgtk-3-dev libjpeg-dev libpng-dev libudev-dev libx11-dev libxext-dev \
            libxml2-dev libxrandr-dev libxrender-dev libxslt1-dev libxt-dev libxtst-dev libxxf86vm-dev \
            make mercurial openjdk-11-jdk pkg-config ruby tree x11proto-core-dev x11proto-xf86vidmode-dev zip
        sudo -E apt-get clean -y

    - name: Compile JCEF
      env:
        JDK_11: /usr/lib/jvm/java-11-openjdk-amd64
        ANT_HOME: /usr/share/ant
      run: |
        git clone --depth=1 https://github.com/JetBrains/jcef.git jcef
        cd jcef
        git log -1
        mkdir jcef_build && cd jcef_build
        cmake -G "Unix Makefiles" -DPROJECT_ARCH="x86_64" -DCMAKE_BUILD_TYPE=Release ..
        make -j2
        cd ../jb/tools/linux && chmod +x *
        ./build.sh all

    - name: Patch & Compile JetBrainsRuntime with JCEF
      env:
        JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
        JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      run: |
        git config --global core.autocrlf input
        git clone --depth 1 -b "${{ inputs.ref }}" --single-branch https://github.com/JetBrains/JetBrainsRuntime.git
        cd JetBrainsRuntime
        git log -1
        patch -p1 < ../idea.patch
        mkdir -p jcef_linux_x64 && cd jcef_linux_x64 && tar -xf ../../jcef/jcef_linux_x64.tar.gz && cd ..
        jb/project/tools/linux/scripts/mkimages_x64.sh '${{ steps.vars.outputs.JBSDK_VERSION }}' '${{ steps.vars.outputs.JDK_BUILD_NUMBER }}' '${{ steps.vars.outputs.build_number }}' '${{ steps.vars.outputs.bundle_type }}'

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ inputs.ref }}
        release_name:  ${{ inputs.release_name }}
        body: ${{ inputs.release_body }}
        draft: false
        prerelease: true

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: JetBrainsRuntime/${{ steps.vars.outputs.JBR }}.tar.gz
        asset_name: ${{ steps.vars.outputs.JBR }}.tar.gz
        asset_content_type: application/gzip


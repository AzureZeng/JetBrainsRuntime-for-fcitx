name: jbr-linux-x64

on:
  workflow_call:
    inputs:
      ref:
        description: The git ref to use for the build
        required: true
        type: string
      release_name:
        required: true
        type: string
      release_body:
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
    - name: Clone Repository
      uses: actions/checkout@v1

    - name: Normalize tag name
      id: normalize-tag
      run: |
        ref="${{ inputs.ref }}"
        if [[ "$ref" != jbr* ]]; then
          ref="jbr$ref"
        fi
        echo ::set-output name=ref::"$ref"

    - name: Init Build Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/lib/jvm/
        sudo -E apt-get update -y
        sudo -E apt-get install -y ant autoconf bison build-essential cmake flex git gperf ksh \
            libasound2-dev libavcodec-dev libavformat-dev libcups2-dev libfontconfig1-dev \
            libgl1-mesa-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libgtk2.0-dev libgtk-3-dev libjpeg-dev libpng-dev libudev-dev libx11-dev libxext-dev \
            libxml2-dev libxrandr-dev libxrender-dev libxslt1-dev libxt-dev libxtst-dev libxxf86vm-dev \
            make mercurial openjdk-11-jdk pkg-config ruby tree x11proto-core-dev x11proto-xf86vidmode-dev zip
        sudo -E apt-get autoremove -y --purge
        sudo -E apt-get clean -y

    - name: Compile JCEF
      env:
        JDK_11: /usr/lib/jvm/java-11-openjdk-amd64
        ANT_HOME: /usr/share/ant
      run: |
        git clone --depth=1 https://github.com/JetBrains/jcef.git jcef
        cd jcef
        git log -1
        mkdir jcef_build && cd jcef_build
        cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ..
        make -j2
        cd ../jb/tools/linux && chmod +x *
        ./build.sh all

    - name: List Paths
      run: |
        cd jcef
        ls -a
        echo
        tree -a

    - name: Patch & Compile JetBrainsRuntime with JCEF
      env:
        JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64
        JDK_HOME: /usr/lib/jvm/java-11-openjdk-amd64
      run: |
        git config --global core.autocrlf input
        git clone --depth 1 -b "${{ inputs.ref }}" --single-branch https://github.com/JetBrains/JetBrainsRuntime.git
        cd JetBrainsRuntime
        git log -1
        git apply -p0 < jb/project/tools/patches/add_jcef_module.patch
        mv ../idea.patch ./
        patch -p1 < idea.patch
        sh ./configure --disable-warnings-as-errors --with-import-modules=../jcef/out/linux64/modular-sdk
        make images

    - name: List Paths
      run: |
        cd JetBrainsRuntime
        ls -a
        echo
        tree -a

    - name: Reduce Size
      env:
        BASE_DIR: build/linux-x86_64-normal-server-release/images
        JBR_BUNDLE: jbr_jcef
        JCEF_PATH: ../jcef/jcef_build/native/Release
      run: |
        cd JetBrainsRuntime
        cat modules.list > modules_tmp.list
        rm -rf ${BASE_DIR}/${JBR_BUNDLE}
        ${BASE_DIR}/jdk/bin/jlink \
            --module-path ${BASE_DIR}/jdk/jmods --no-man-pages --compress=2 \
            --add-modules $(xargs < modules_tmp.list | sed s/" "//g) --output $BASE_DIR/$JBR_BUNDLE
        cp -R $BASE_DIR/$JBR_BUNDLE $BASE_DIR/jbr
        rsync -av ${JCEF_PATH}/ $BASE_DIR/$JBR_BUNDLE/lib --exclude="modular-sdk"
        grep -v "^JAVA_VERSION" ${BASE_DIR}/jdk/release | grep -v "^MODULES" >> $BASE_DIR/$JBR_BUNDLE/release
        rm -rf ${BASE_DIR}/jbr
        cp -R ${BASE_DIR}/${JBR_BUNDLE} ${BASE_DIR}/jbr

    - name: Package Artifact
      run: |
        cd JetBrainsRuntime/build/linux-x86_64-normal-server-release/images
        mv jbr ${{ steps.normalize-tag.outputs.ref }}
        zip -r ${{ steps.normalize-tag.outputs.ref }}-linux-x64.zip ./${{ steps.normalize-tag.outputs.ref }}/*
        mv ${{ steps.normalize-tag.outputs.ref }}-linux-x64.zip ../../../../

    - name: Upload Artifact
      uses: actions/upload-artifact@master
      with:
        name: ${{ steps.normalize-tag.outputs.ref }}.zip
        path: ${{ steps.normalize-tag.outputs.ref }}-linux-x64.zip

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ inputs.ref }}
        release_name:  ${{ inputs.release_name }}
        body: ${{ inputs.release_body }}
        draft: false
        prerelease: true

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.normalize-tag.outputs.ref }}-linux-x64.zip
        asset_name: ${{ steps.normalize-tag.outputs.ref }}-linux-x64.zip
        asset_content_type: application/zip

